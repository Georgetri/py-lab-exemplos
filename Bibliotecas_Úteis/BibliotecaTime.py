import time

print("\n üï∞Ô∏è O time √© extremamente √∫til quando voc√™ precisa medir a performance de um c√≥digo, "
      "criar delays no seu programa, ou trabalhar com datas e horas.\n")
print()
# 1. Pegando o tempo atual em segundos desde a "√©poca" (1970-01-01)
tempo_atual = time.time()
print(f"Tempo atual (segundos desde 1970-01-01): {tempo_atual}")

# 2. Usando time.sleep() - Fazendo o programa "dormir" por alguns segundos
print("\nDormindo por 2 segundos...")
time.sleep(2)  # Programa "dorme" por 2 segundos
print("Mais 2 segundos...")
time.sleep(2)
print("Acordei ap√≥s 2 segundos!")

# 3. Medindo o tempo de execu√ß√£o de um c√≥digo
inicio = time.time()
for i in range(1000000):
    pass  # Simula√ß√£o de um c√≥digo de longo tempo
fim = time.time()
print(f"\nTempo de execu√ß√£o do loop: {fim - inicio} segundos")

antes = time.time()
lista = []
for i in range(0,10000): # Executando o for 10 mil vezes
    lista.append(i)
depois = time.time()
print(f"Tempo de execu√ß√£o do loop For de 0 a 10 mil: {depois - antes} segundos")

# 4. Trabalhando com a fun√ß√£o time.localtime()
# Isso nos d√° a data e hora local em um formato estruturado (tupla)
tempo_local = time.localtime()
print(f"\nData e hora local (time.localtime()): {tempo_local}")

# 5. Convertendo para um formato leg√≠vel com time.asctime()
data_legivel = time.asctime(tempo_local)
print(f"\nData leg√≠vel com time.asctime(): {data_legivel}")

# 6. Convertendo para um formato customizado com time.strftime()
formato_personalizado = time.strftime("%d/%m/%Y %H:%M:%S", tempo_local)
print(f"\nData formatada com time.strftime(): {formato_personalizado}")

# 7. Convertendo uma string para um objeto de tempo com time.strptime()
# Aqui vamos pegar uma string no formato espec√≠fico e convert√™-la para o tipo de dado struct_time
data_string = "25/12/2025 15:30:00"
tempo_convertido = time.strptime(data_string, "%d/%m/%Y %H:%M:%S")
print(f"\nConvertendo string para tempo (time.strptime): {tempo_convertido}")

# 8. Usando time.mktime() para converter struct_time de volta para segundos desde 1970
segundos = time.mktime(tempo_convertido)
print(f"\nSegundos desde 1970 para a data convertida: {segundos}")

# 9. Calculando o tempo em segundos entre duas datas
tempo_inicial = time.mktime(time.strptime("01/01/2020 00:00:00", "%d/%m/%Y %H:%M:%S"))
tempo_final = time.mktime(time.strptime("01/01/2021 00:00:00", "%d/%m/%Y %H:%M:%S"))
diferenca_tempo = tempo_final - tempo_inicial
print(f"\nDiferen√ßa em segundos entre 01/01/2020 e 01/01/2021: {diferenca_tempo} segundos")

# 10. Trabalhando com time.perf_counter() - Medindo o tempo de alta precis√£o
inicio_preciso = time.perf_counter()
for i in range(1000000):
    pass
fim_preciso = time.perf_counter()
print(f"\nTempo de execu√ß√£o com alta precis√£o (perf_counter): {fim_preciso - inicio_preciso} segundos")

# 11. Obtendo o tempo em formato de contagem crescente com time.process_time()
# Esse tempo n√£o √© afetado por mudan√ßas de sistema, ele conta o tempo de CPU
inicio_cpu = time.process_time()
for i in range(1000000):
    pass
fim_cpu = time.process_time()
print(f"\nTempo de CPU (process_time): {fim_cpu - inicio_cpu} segundos")

# 12. Trabalhando com time.gmtime() - Convertendo para UTC (hora universal coordenada)
tempo_utc = time.gmtime()
print(f"\nHora UTC (time.gmtime()): {tempo_utc}")

# 13. Usando time.monotonic() - Tempo monot√¥nico, √∫til para intervalos
inicio_monotonic = time.monotonic()
time.sleep(1)  # Dorme por 1 segundo
fim_monotonic = time.monotonic()
print(f"\nTempo monot√¥nico: {fim_monotonic - inicio_monotonic} segundos")

# 14. Verificando se o c√≥digo foi executado com sucesso utilizando a fun√ß√£o time.time()
print(f"\nVerificando tempo atual com time.time() novamente: {time.time()}")

print("\n")

'''
üîç Explica√ß√µes detalhadas para cada fun√ß√£o do c√≥digo:

time.time(): Retorna o tempo em segundos desde a "√©poca" (1970-01-01). Pode ser √∫til para c√°lculos de tempo e medir a dura√ß√£o de eventos.

time.sleep(segs): Faz o programa "dormir" por um determinado n√∫mero de segundos. Muito usado para pausas ou esperas em execu√ß√µes.

Medir o tempo de execu√ß√£o: Usamos time.time() para capturar o tempo inicial e final, e subtra√≠mos para saber quanto tempo o c√≥digo levou para ser executado.

time.localtime(): Retorna o tempo local como uma estrutura struct_time (um tipo de dado semelhante a uma tupla com valores como ano, m√™s, dia, etc.).

time.asctime(): Converte a estrutura struct_time em uma string leg√≠vel, no formato "Day Mon Date hh:mm:ss Year".

time.strftime(format, t): Converte a estrutura struct_time para uma string formatada. O format permite que voc√™ escolha como deseja mostrar a data/hora, e voc√™ pode usar placeholders como %d, %m, %Y, %H, %M, %S, etc.

time.strptime(string, format): Converte uma string de data/hora em um objeto struct_time de acordo com o formato fornecido.

time.mktime(t): Converte uma estrutura struct_time (obtida com time.strptime(), por exemplo) de volta para segundos desde a "√©poca".

Calcular a diferen√ßa entre duas datas: Usando mktime(), podemos calcular a diferen√ßa em segundos entre duas datas (√∫til para medir a dura√ß√£o entre eventos).

time.perf_counter(): Retorna o tempo com alta precis√£o. Usado para medir intervalos de tempo com precis√£o de fra√ß√µes de segundo. Ideal para benchmarking.

time.process_time(): Retorna o tempo de CPU consumido pelo processo. √ötil para medir o tempo de execu√ß√£o do c√≥digo, mas n√£o inclui o tempo de espera (como o tempo de inatividade do sistema).

time.gmtime(): Retorna a hora em UTC (Coordinated Universal Time), ou seja, o hor√°rio sem considerar o fuso hor√°rio local.

time.monotonic(): Retorna o tempo de uma "contagem crescente" que n√£o √© afetada por ajustes no sistema de rel√≥gio. Usado para medir intervalos de tempo, pois nunca diminui.

üìö Resumo das Fun√ß√µes:
Fun√ß√µes de Tempo Atual: time.time(), time.localtime(), time.gmtime()

Fun√ß√µes de Formata√ß√£o: time.asctime(), time.strftime(), time.strptime()

Fun√ß√µes de Medi√ß√£o de Tempo: time.perf_counter(), time.process_time(), time.monotonic()

Fun√ß√µes de Controle de Fluxo: time.sleep()

Fun√ß√µes de C√°lculo de Intervalos: time.mktime()
'''