import re

# ----------------------------------------------
# 31. Encontrar abrevia√ß√µes (Sr., Dra., etc.)
texto = "Sr. Jo√£o e Dra. Maria est√£o presentes."
abreviacoes = re.findall(r'\b[A-Z][a-z]{1,3}\.', texto)
print("31. Abrevia√ß√µes encontradas:", abreviacoes)
# Regex: \b[A-Z][a-z]{1,3}\.
# Explica√ß√£o: Letra mai√∫scula + 1 a 3 letras min√∫sculas + ponto.

# ----------------------------------------------
# 32. Validar datas (DD/MM/AAAA)
datas = re.findall(r'\b\d{2}/\d{2}/\d{4}\b', "Hoje √© 27/04/2025.")
print("32. Datas encontradas:", datas)
# Regex: \b\d{2}/\d{2}/\d{4}\b
# Explica√ß√£o: Dois d√≠gitos + / + dois d√≠gitos + / + quatro d√≠gitos.

# ----------------------------------------------
# 33. Extrair hashtags
texto = "Falando sobre #Python e #MachineLearning!"
hashtags = re.findall(r'#\w+', texto)
print("33. Hashtags:", hashtags)
# Regex: #\w+
# Explica√ß√£o: Um '#' seguido de letras, n√∫meros ou underscores.

# ----------------------------------------------
# 34. Extrair men√ß√µes (@usuario)
texto = "Contatos: @ana, @joao_dev."
mencoes = re.findall(r'@\w+', texto)
print("34. Men√ß√µes:", mencoes)
# Regex: @\w+
# Explica√ß√£o: Um '@' seguido de letras, n√∫meros ou underscores.

# ----------------------------------------------
# 35. Encontrar unidades de medida (kg, cm, mL)
texto = "Preciso de 10kg de arroz e 500mL de leite."
medidas = re.findall(r'\d+\s?(kg|mL|cm|g)', texto)
print("35. Medidas encontradas:", medidas)
# Regex: \d+\s?(kg|mL|cm|g)
# Explica√ß√£o: N√∫mero seguido de unidade (opcional espa√ßo).

# ----------------------------------------------
# 36. Identificar emojis simples (unicode b√°sico)
texto = "Hoje estou üòÉ! Amanh√£ talvez üò¢."
emojis = re.findall(r'[\U0001F600-\U0001F64F]', texto)
print("36. Emojis encontrados:", emojis)
# Regex: [\U0001F600-\U0001F64F]
# Explica√ß√£o: Emojis b√°sicos de emo√ß√µes (carinhas).

# ----------------------------------------------
# 37. Limpar texto para IA (apenas letras)
texto = "Modelo V2.0 est√° 90% conclu√≠do!!!"
texto_limpo = re.sub(r'[^A-Za-z√Ä-√ñ√ò-√∂√∏-√ø\s]', '', texto)
print("37. Texto limpo:", texto_limpo)
# Regex: [^A-Za-z√Ä-√ñ√ò-√∂√∏-√ø\s]
# Explica√ß√£o: Remove tudo que n√£o for letra ou espa√ßo.

# ----------------------------------------------
# 38. Encontrar palavras negativas (n√£o, jamais)
texto = "Ele n√£o gostou e jamais voltar√°."
negativas = re.findall(r'\b(n√£o|jamais|nunca|nenhum)\b', texto, flags=re.IGNORECASE)
print("38. Palavras negativas:", negativas)
# Regex: \b(n√£o|jamais|nunca|nenhum)\b
# Explica√ß√£o: Captura palavras negativas comuns.

# ----------------------------------------------
# 39. Capturar cita√ß√µes ("fala")
texto = 'Ele disse: "Aprender √© importante".'
citacoes = re.findall(r'"([^"]+)"', texto)
print("39. Cita√ß√µes:", citacoes)
# Regex: "([^"]+)"
# Explica√ß√£o: Texto entre aspas.

# ----------------------------------------------
# 40. Quebrar par√°grafos por linha vazia
texto = "Primeiro par√°grafo.\n\nSegundo par√°grafo."
paragrafos = re.split(r'\n\s*\n', texto)
print("40. Par√°grafos:", paragrafos)
# Regex: \n\s*\n
# Explica√ß√£o: Divide por duas quebras de linha (par√°grafo).

# ----------------------------------------------
# 41. Extrair pares chave:valor
texto = "nome:Jo√£o idade:25 cidade:SP"
pares = re.findall(r'(\w+):(\w+)', texto)
print("41. Pares chave-valor:", pares)
# Regex: (\w+):(\w+)
# Explica√ß√£o: Captura palavra + ':' + palavra.

# ----------------------------------------------
# 42. Validar IPs IPv4
texto = "O servidor est√° em 192.168.0.1 e o backup em 10.0.0.2."
ips = re.findall(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', texto)
print("42. IPs encontrados:", ips)
# Regex: (?:\d{1,3}\.){3}\d{1,3}
# Explica√ß√£o: Tr√™s n√∫meros com pontos + n√∫mero final.

# ----------------------------------------------
# 43. Encontrar placas de carro (Brasil novo padr√£o)
texto = "Meu carro √© ABC1D23 e o outro √© XYZ9K88."
placas = re.findall(r'\b[A-Z]{3}\d[A-Z]\d{2}\b', texto)
print("43. Placas encontradas:", placas)
# Regex: [A-Z]{3}\d[A-Z]\d{2}
# Explica√ß√£o: Tr√™s letras + um n√∫mero + uma letra + dois n√∫meros.

# ----------------------------------------------
# 44. Encontrar palavras s√≥ em caixa alta (gritos)
texto = "ATEN√á√ÉO: ESTE AVISO √â IMPORTANTE!"
gritos = re.findall(r'\b[A-Z]{2,}\b', texto)
print("44. Palavras em caixa alta:", gritos)
# Regex: \b[A-Z]{2,}\b
# Explica√ß√£o: Palavras com 2 ou mais letras mai√∫sculas.

# ----------------------------------------------
# 45. Filtrar nomes pr√≥prios (iniciais mai√∫sculas)
texto = "Maria foi √† escola com Jo√£o."
nomes = re.findall(r'\b[A-Z][a-z]+\b', texto)
print("45. Nomes pr√≥prios:", nomes)
# Regex: \b[A-Z][a-z]+\b
# Explica√ß√£o: Letra mai√∫scula + sequ√™ncia de min√∫sculas.

# ----------------------------------------------
# 46. Separar nomes compostos
texto = "Ana Clara e Jo√£o Pedro s√£o amigos."
nomes_compostos = re.findall(r'\b[A-Z][a-z]+\s[A-Z][a-z]+\b', texto)
print("46. Nomes compostos:", nomes_compostos)
# Regex: [A-Z][a-z]+\s[A-Z][a-z]+
# Explica√ß√£o: Dois nomes com espa√ßo entre eles.

# ----------------------------------------------
# 47. Detectar hor√°rios (ex: 23:45)
texto = "A reuni√£o ser√° √†s 14:30 e o almo√ßo √†s 12:00."
horarios = re.findall(r'\b\d{2}:\d{2}\b', texto)
print("47. Hor√°rios:", horarios)
# Regex: \b\d{2}:\d{2}\b
# Explica√ß√£o: Dois d√≠gitos + ':' + dois d√≠gitos.

# ----------------------------------------------
# 48. Extrair termos entre colchetes ou par√™nteses
texto = "Informa√ß√µes [confidenciais] (importantes)"
termos = re.findall(r'[\[\(](.*?)[\]\)]', texto)
print("48. Termos extra√≠dos:", termos)
# Regex: [\[\(](.*?)[\]\)]
# Explica√ß√£o: Captura texto dentro de () ou [].

# ----------------------------------------------
# 49. Encontrar textos com s√≠mbolos misturados
texto = "Senha segura: p@ssw0rd!"
misturados = re.findall(r'\b\w*[@#$%^&*]\w*\b', texto)
print("49. Palavras com s√≠mbolos:", misturados)
# Regex: \b\w*[@#$%^&*]\w*\b
# Explica√ß√£o: Palavras que possuem pelo menos um s√≠mbolo especial.

# ----------------------------------------------
# 50. Capturar coment√°rios simples em c√≥digo
codigo = "// Este √© um coment√°rio\nvar x = 10; /* coment√°rio */"
comentarios = re.findall(r'//.*?$|/\*.*?\*/', codigo, flags=re.DOTALL | re.MULTILINE)
print("50. Coment√°rios encontrados:", comentarios)
# Regex: //.*?$|/\*.*?\*/
# Explica√ß√£o: Captura coment√°rios de uma linha (//) ou m√∫ltiplas linhas (/* */).

# ----------------------------------------------
